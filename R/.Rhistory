x[i, ,j] <- rnorm(p, 0, error_sd)
for (l in 1:d)
{
x[i, ,j] <- x[i, ,j] + edge[l,,] %*% x[i, ,j-l]
}
}
}
return(x[,,-c(1:(cutt*d))])
}
rm(list =ls())
setwd("/Users/xinyi/Documents/GitHub/network_ngc/R")
library('microbenchmark')
source("defn.R")
source("simulation_v2.r")
source("array2mat.r")
source("pldag.set.r")
source("ngc.r")
source("grangerLasso.r")
source("grangerTLasso_v3.r")
source("grangerThrLasso.r")
source("metrics.R")
library(glmnet)
library(gglasso)
library(igraph)
library("xtable")
set.seed(123)
d <- 2
p <- 20
n <- 30
edge = defn_net(d = d, p = p, n = n, sparsity = 0.1)
set.seed(123)
grp = c(rep(1,5),rep(2,5))
edge_grp = defn_net(d = d, p = p, n = n, grp = grp, sparsity = 0.1)
microbenchmark(defn_net(d = d, p = p, n = n), times=10)
phi_true = array(c((edge[2,,]),(edge[1,,])), dim = c(p,p,d))
phi_true_grp = array(c((edge_grp[2,,]),(edge_grp[1,,])), dim = c(p,p,d))
set.seed(123)
T <- 10
error_sd <- 0.2
X <- simulate_data(n, edge, T = T, error_sd = error_sd)
X_grp <- simulate_data(n, edge_grp, T = T, error_sd = error_sd)
# which(abs(unlist(X)) < 0.000010)
which(abs(unlist(X)) > 100000)
#' Simulate n iid samples from the granger causality network with p variables observed over T time points
#' @param n sample size
#' @param edge adjacency matrices
#' @param T number of time points to simulate
#' @param error_sd standard deviation of the error term
#' @param cutt how long to wait for the VAR process to be stationary
#' @return an n x p x T array with the simulated data
#' @export simulate_data
#'
n = 20
T = 10
error_sd = 0.1
cutt = 30
d <- dim(edge)[1]
p <- dim(edge)[2]
x = array(0, c(n, p, T+(cutt*d)))
d
p
x
dim(x)
#' Simulate n iid samples from the granger causality network with p variables observed over T time points
#' @param n sample size
#' @param edge adjacency matrices
#' @param T number of time points to simulate
#' @param error_sd standard deviation of the error term
#' @param cutt how long to wait for the VAR process to be stationary
#' @return an n x p x T array with the simulated data
#' @export simulate_data
#'
n = 30
T = 10
d <- dim(edge)[1]
p <- dim(edge)[2]
x = array(0, c(n, p, T+(cutt*d)))
dim(x)
i=q
q
i=1
x[i, 1:p, 1:d]
x[i, 1:p, 1:d] <- rnorm(d*p, 0, error_sd)
x[i, 1:p, 1:d]
j=d+1
j
x[i, ,j]
p
dim(x)
x[i, 1:p, 1:d]
x[i, ,j] <- rnorm(p, 0, error_sd)
x[i, ,j]
x[i, ,j] + edge[l,,] %*% x[i, ,j-l]
for (l in 1:d)
{
x[i, ,j] <- x[i, ,j] + edge[l,,] %*% x[i, ,j-l]
}
x
ncol(x[1,,])
T
d <- dim(edge)[1]
p <- dim(edge)[2]
x = array(0, c(n, p, T+(cutt*d)))
i=1
x[i, 1:p, 1:d] <- rnorm(d*p, 0, error_sd)
for (j in (d+1): ncol(x[1,,]))
{
x[i, ,j] <- rnorm(p, 0, error_sd)
for (l in 1:d)
{
x[i, ,j] <- x[i, ,j] + edge[l,,] %*% x[i, ,j-l]
}
}
x[i, 1:p, 1:d]
i=2
x[i, 1:p, 1:d] <- rnorm(d*p, 0, error_sd)
for (j in (d+1): ncol(x[1,,]))
{
x[i, ,j] <- rnorm(p, 0, error_sd)
for (l in 1:d)
{
x[i, ,j] <- x[i, ,j] + edge[l,,] %*% x[i, ,j-l]
}
}
x[i, 1:p, 1:d]
i=3
x[i, 1:p, 1:d] <- rnorm(d*p, 0, error_sd)
for (j in (d+1): ncol(x[1,,]))
{
x[i, ,j] <- rnorm(p, 0, error_sd)
for (l in 1:d)
{
x[i, ,j] <- x[i, ,j] + edge[l,,] %*% x[i, ,j-l]
}
}
x[i, 1:p, 1:d]
rm(list =ls())
setwd("/Users/xinyi/Documents/GitHub/network_ngc/R")
library('microbenchmark')
source("defn.R")
source("simulation_v2.r")
source("array2mat.r")
source("pldag.set.r")
source("ngc.r")
source("grangerLasso.r")
source("grangerTLasso_v3.r")
source("grangerThrLasso.r")
source("metrics.R")
library(glmnet)
library(gglasso)
library(igraph)
library("xtable")
set.seed(123)
d <- 2
p <- 20
n <- 30
edge = defn_net(d = d, p = p, n = n, sparsity = 0.1)
set.seed(123)
grp = c(rep(1,5),rep(2,5))
edge_grp = defn_net(d = d, p = p, n = n, grp = grp, sparsity = 0.1)
microbenchmark(defn_net(d = d, p = p, n = n), times=10)
phi_true = array(c((edge[2,,]),(edge[1,,])), dim = c(p,p,d))
phi_true_grp = array(c((edge_grp[2,,]),(edge_grp[1,,])), dim = c(p,p,d))
set.seed(123)
T <- 10
error_sd <- 0.2
X <- simulate_data(n, edge, T = T, error_sd = error_sd)
X_grp <- simulate_data(n, edge_grp, T = T, error_sd = error_sd)
# which(abs(unlist(X)) < 0.000010)
which(abs(unlist(X)) > 100000)
X[which(abs(unlist(X)) > 100000)]
edge
dim(edge)
n = 30
T = 10
simulate_data <-
function(
n,
edge,
T,
error_sd = 0.1,
cutt = 30
){
d <- dim(edge)[1]
p <- dim(edge)[2]
x = array(0, c(n, p, T+(cutt*d)))
for (i in 1:n)
{
x[i, 1:p, 1:d] <- rnorm(d*p, 0, error_sd)
for (j in (d+1): ncol(x[1,,]))
{
x[i, ,j] <- rnorm(p, 0, error_sd)
for (l in 1:d)
{
if (any(abs(x[i, ,j]) > 1e3) ) {
print(paste(i,"j:", j))
}
x[i, ,j] <- x[i, ,j] + edge[l,,] %*% x[i, ,j-l]
}
}
}
return(x[,,-c(1:(cutt*d))])
}
cutt = 30
error_sd = 0.1
d <- dim(edge)[1]
p <- dim(edge)[2]
x = array(0, c(n, p, T+(cutt*d)))
dim(edge)
for (i in 1:n)
{
x[i, 1:p, 1:d] <- rnorm(d*p, 0, error_sd)
for (j in (d+1): ncol(x[1,,]))
{
x[i, ,j] <- rnorm(p, 0, error_sd)
for (l in 1:d)
{
if (any(abs(x[i, ,j]) > 1e3) ) {
print(paste(i,"j:", j))
}
x[i, ,j] <- x[i, ,j] + edge[l,,] %*% x[i, ,j-l]
}
}
}
d <- dim(edge)[1]
p <- dim(edge)[2]
x = array(0, c(n, p, T+(cutt*d)))
for (i in 1:n)
{
x[i, 1:p, 1:d] <- rnorm(d*p, 0, error_sd)
for (j in (d+1): ncol(x[1,,]))
{
x[i, ,j] <- rnorm(p, 0, error_sd)
for (l in 1:d)
{
if (any(abs(x[i, ,j]) > 1e3) ) {
print(paste(i,"j:", j))
break
}
x[i, ,j] <- x[i, ,j] + edge[l,,] %*% x[i, ,j-l]
}
}
}
x[1, ,50]
x[1, ,10]
x[1, ,20]
edge
edge[1,,]
det(edge)
det(edge[1,,])
det(diag(1, p,p) - 0.01*edge[1,,])
det(diag(1, p,p) - 0.1*edge[1,,])
det(diag(1, p,p) - 0.1*edge[2,,])
det(diag(1, p,p) - 0.01*edge[2,,])
edge[2,,]
rm(list =ls())
setwd("/Users/xinyi/Documents/GitHub/network_ngc/R")
library('microbenchmark')
source("defn.R")
source("simulation_v2.r")
source("array2mat.r")
source("pldag.set.r")
source("ngc.r")
source("grangerLasso.r")
source("grangerTLasso_v3.r")
source("grangerThrLasso.r")
source("metrics.R")
library(glmnet)
library(gglasso)
library(igraph)
library("xtable")
set.seed(123)
d <- 2
p <- 20
n <- 30
edge = defn_net(d = d, p = p, n = n, sparsity = 0.05)
set.seed(123)
grp = c(rep(1,5),rep(2,5))
edge_grp = defn_net(d = d, p = p, n = n, grp = grp, sparsity = 0.05)
microbenchmark(defn_net(d = d, p = p, n = n), times=10)
phi_true = array(c((edge[2,,]),(edge[1,,])), dim = c(p,p,d))
phi_true_grp = array(c((edge_grp[2,,]),(edge_grp[1,,])), dim = c(p,p,d))
det(diag(1, p,p) - 0.01*edge[2,,])
det(diag(1, p,p) - 0.01*edge[1,,])
edge[1,,]
rm(list =ls())
setwd("/Users/xinyi/Documents/GitHub/network_ngc/R")
library('microbenchmark')
source("defn.R")
source("simulation_v2.r")
source("array2mat.r")
source("pldag.set.r")
source("ngc.r")
source("grangerLasso.r")
source("grangerTLasso_v3.r")
source("grangerThrLasso.r")
source("metrics.R")
library(glmnet)
library(gglasso)
library(igraph)
library("xtable")
set.seed(123)
d <- 2
p <- 20
n <- 30
edge = defn_net(d = d, p = p, n = n, sparsity = 0.05)
set.seed(123)
grp = c(rep(1,5),rep(2,5))
edge_grp = defn_net(d = d, p = p, n = n, grp = grp, sparsity = 0.05)
microbenchmark(defn_net(d = d, p = p, n = n), times=10)
phi_true = array(c((edge[2,,]),(edge[1,,])), dim = c(p,p,d))
phi_true_grp = array(c((edge_grp[2,,]),(edge_grp[1,,])), dim = c(p,p,d))
set.seed(123)
T <- 10
error_sd <- 0.2
X <- simulate_data(n, edge, T = T, error_sd = error_sd)
X_grp <- simulate_data(n, edge_grp, T = T, error_sd = error_sd)
# which(abs(unlist(X)) < 0.000010)
which(abs(unlist(X)) > 100000)
X[which(abs(unlist(X)) > 100000)]
X
rm(list =ls())
setwd("/Users/xinyi/Documents/GitHub/network_ngc/R")
library('microbenchmark')
source("defn.R")
source("simulation_v2.r")
source("array2mat.r")
source("pldag.set.r")
source("ngc.r")
source("grangerLasso.r")
source("grangerTLasso_v3.r")
source("grangerThrLasso.r")
source("metrics.R")
library(glmnet)
library(gglasso)
library(igraph)
library("xtable")
set.seed(123)
d <- 2
p <- 20
n <- 30
edge = defn_net(d = d, p = p, n = n, sparsity = 0.05)
set.seed(123)
grp = c(rep(1,5),rep(2,5))
edge_grp = defn_net(d = d, p = p, n = n, grp = grp, sparsity = 0.05)
microbenchmark(defn_net(d = d, p = p, n = n), times=10)
phi_true = array(c((edge[2,,]),(edge[1,,])), dim = c(p,p,d))
phi_true_grp = array(c((edge_grp[2,,]),(edge_grp[1,,])), dim = c(p,p,d))
set.seed(123)
T <- 10
error_sd <- 0.2
X <- simulate_data(n, edge, T = T, error_sd = error_sd)
X_grp <- simulate_data(n, edge_grp, T = T, error_sd = error_sd)
# which(abs(unlist(X)) < 0.000010)
which(abs(unlist(X)) > 100000)
X[which(abs(unlist(X)) > 100000)]
# which(abs(unlist(X_grp)) > 100000)
microbenchmark(simulate_data(n, edge, T = T, error_sd = error_sd),
times=10)
fit1 = ngc(X, d = d, method = 'regular', typeIerr = 0.02)
microbenchmark(ngc(X, d = d, method = 'regular', typeIerr = 0.02),
times = 10)
checkEstimation(phi_true, fit1$estMat, method_name = "Lasso")$metrics
group = c(rep(1,p/2),rep(2,p/2))
fit12 = ngc(X, d = d, method = 'regular', typeIerr = 0.02, group = group)
checkEstimation(phi_true, fit12$estMat, method_name = "Lasso")$metrics
group = c(rep(1,5),rep(2,5))
fit12 = ngc(X_grp, d = d, method = 'regular', typeIerr = 0.02, group = group)
group = c(rep(1,p/2),rep(2,p/2))
fit12 = ngc(X_grp, d = d, method = 'regular', typeIerr = 0.02, group = group)
checkEstimation(phi_true_grp, fit12$estMat, method_name = "Lasso")$metrics
group = c(rep(1,5),rep(2,5))
fit13 = ngc(X, d = d, method = 'regular', typeIerr = 0.02, group = group, groupByTime = TRUE)
group = c(rep(1,p/2),rep(2,p/2))
fit13 = ngc(X, d = d, method = 'regular', typeIerr = 0.02, group = group, groupByTime = TRUE)
checkEstimation(phi_true, fit13$estMat, method_name = "Lasso")$metrics
fit132 = ngc(X, d = d, method = 'regular', typeIerr = 0.02, groupByTime = TRUE)
checkEstimation(phi_true, fit132$estMat, method_name = "Lasso")$metrics
fit13 = ngc(X_grp, d = d, method = 'regular', typeIerr = 0.02, group = group, groupByTime = TRUE)
checkEstimation(phi_true_grp, fit13$estMat, method_name = "Lasso")$metrics
fit132 = ngc(X_grp, d = d, method = 'regular', groupByTime = TRUE)
checkEstimation(phi_true, fit132$estMat, method_name = "Lasso")$metrics
(1/sqrt(n))*qnorm(1-sigLevel/(2*ncov*nvar))
sigLevel = 0.02
(1/sqrt(n))*qnorm(1-sigLevel/(2*ncov*nvar))
ncov = d*p
nvar = p
(1/sqrt(n))*qnorm(1-sigLevel/(2*ncov*nvar))
(1/sqrt(n))*qnorm(1-sigLevel/(2*ncov*nvar^2))
fit132 = ngc(X_grp, d = d, method = 'regular', groupByTime = TRUE)
checkEstimation(phi_true, fit132$estMat, method_name = "Lasso")$metrics
fit13 = ngc(X_grp, d = d, method = 'regular', typeIerr = 0.02, group = group, groupByTime = TRUE)
checkEstimation(phi_true_grp, fit13$estMat, method_name = "Lasso")$metrics
fit132 = ngc(X, d = d, method = 'regular', typeIerr = 0.02, groupByTime = TRUE)
checkEstimation(phi_true, fit132$estMat, method_name = "Lasso")$metrics
fit13 = ngc(X, d = d, method = 'regular', typeIerr = 0.02, group = group, groupByTime = TRUE)
checkEstimation(phi_true, fit13$estMat, method_name = "Lasso")$metrics
fit1 = ngc(X, d = d, method = 'regular', typeIerr = 0.02)
checkEstimation(phi_true, fit1$estMat, method_name = "Lasso")$metrics
rm(list =ls())
setwd("/Users/xinyi/Documents/GitHub/network_ngc/R")
library('microbenchmark')
source("defn.R")
source("simulation_v2.r")
source("array2mat.r")
source("pldag.set.r")
source("ngc.r")
source("grangerLasso.r")
source("grangerTLasso_v3.r")
source("grangerThrLasso.r")
source("metrics.R")
library(glmnet)
library(gglasso)
library(igraph)
library("xtable")
set.seed(123)
d <- 2
p <- 20
n <- 30
edge = defn_net(d = d, p = p, n = n, sparsity = 0.05)
set.seed(123)
grp = c(rep(1,5),rep(2,5))
edge_grp = defn_net(d = d, p = p, n = n, grp = grp, sparsity = 0.05)
microbenchmark(defn_net(d = d, p = p, n = n), times=10)
phi_true = array(c((edge[2,,]),(edge[1,,])), dim = c(p,p,d))
phi_true_grp = array(c((edge_grp[2,,]),(edge_grp[1,,])), dim = c(p,p,d))
set.seed(123)
T <- 10
error_sd <- 0.2
X <- simulate_data(n, edge, T = T, error_sd = error_sd)
X_grp <- simulate_data(n, edge_grp, T = T, error_sd = error_sd)
# which(abs(unlist(X)) < 0.000010)
which(abs(unlist(X)) > 100000)
X[which(abs(unlist(X)) > 100000)]
# which(abs(unlist(X_grp)) > 100000)
microbenchmark(simulate_data(n, edge, T = T, error_sd = error_sd),
times=10)
fit1 = ngc(X, d = d, method = 'regular', typeIerr = 0.02)
microbenchmark(ngc(X, d = d, method = 'regular', typeIerr = 0.02),
times = 10)
checkEstimation(phi_true, fit1$estMat, method_name = "Lasso")$metrics
fit1 = ngc(X, d = d, method = 'regular')
checkEstimation(phi_true, fit1$estMat, method_name = "Lasso")$metrics
fit1 = ngc(X, d = d, method = 'regular', typeIerr = 0.002)
checkEstimation(phi_true, fit1$estMat, method_name = "Lasso")$metrics
fit1 = ngc(X, d = d, method = 'regular', typeIerr = 0.2)
checkEstimation(phi_true, fit1$estMat, method_name = "Lasso")$metrics
group = c(rep(1,p/2),rep(2,p/2))
fit1 = ngc(X, d = d, method = 'regular', typeIerr = 0.8)
checkEstimation(phi_true, fit1$estMat, method_name = "Lasso")$metrics
fit1 = ngc(X, d = d, method = 'regular', typeIerr = 1)
checkEstimation(phi_true, fit1$estMat, method_name = "Lasso")$metrics
fit1 = ngc(X, d = d, method = 'regular', typeIerr = 0.01)
checkEstimation(phi_true, fit1$estMat, method_name = "Lasso")$metrics
fit1 = ngc(X, d = d, method = 'regular', typeIerr = 0.001)
checkEstimation(phi_true, fit1$estMat, method_name = "Lasso")$metrics
fit1 = ngc(X, d = d, method = 'regular', typeIerr = 0.000001)
checkEstimation(phi_true, fit1$estMat, method_name = "Lasso")$metrics
X
dim(X)
dim(X[1,,])
X[1,,]
X[2,,]
X[10,,]
rm(list =ls())
setwd("/Users/xinyi/Documents/GitHub/network_ngc/R")
library('microbenchmark')
source("defn.R")
source("simulation_v2.r")
source("array2mat.r")
source("pldag.set.r")
source("ngc.r")
source("grangerLasso.r")
source("grangerTLasso_v3.r")
source("grangerThrLasso.r")
source("metrics.R")
library(glmnet)
library(gglasso)
library(igraph)
library("xtable")
set.seed(123)
d <- 2
p <- 20
n <- 30
edge = defn_net(d = d, p = p, n = n, sparsity = 0.05)
set.seed(123)
grp = c(rep(1,5),rep(2,5))
edge_grp = defn_net(d = d, p = p, n = n, grp = grp, sparsity = 0.05)
microbenchmark(defn_net(d = d, p = p, n = n), times=10)
phi_true = array(c((edge[2,,]),(edge[1,,])), dim = c(p,p,d))
phi_true_grp = array(c((edge_grp[2,,]),(edge_grp[1,,])), dim = c(p,p,d))
set.seed(123)
T <- 10
error_sd <- 0.2
X <- simulate_data(n, edge, T = T, error_sd = error_sd)
X_grp <- simulate_data(n, edge_grp, T = T, error_sd = error_sd)
# which(abs(unlist(X)) < 0.000010)
which(abs(unlist(X)) > 100000)
X[which(abs(unlist(X)) > 100000)]
# which(abs(unlist(X_grp)) > 100000)
microbenchmark(simulate_data(n, edge, T = T, error_sd = error_sd),
times=10)
fit1 = ngc(X, d = d, method = 'regular', typeIerr = 0.000001)
checkEstimation(phi_true, fit1$estMat, method_name = "Lasso")$metrics
fit1 = ngc(X, d = d, method = 'regular', typeIerr = 0.01)
checkEstimation(phi_true, fit1$estMat, method_name = "Lasso")$metrics
fit1 = ngc(X, d = d, method = 'regular', typeIerr = 0.1)
checkEstimation(phi_true, fit1$estMat, method_name = "Lasso")$metrics
unlink('metrics_eval_cache', recursive = TRUE)
unlink('metrics_eval_cache', recursive = TRUE)
group = c(rep(1,8),rep(2,8))
unlink('metrics_eval_cache', recursive = TRUE)
