pt(zscore, df = 2*n - 2, ncp=t.gamma)
pt(zscore - t.gamma/4, df = 2*n - 2)
t.gamma
t.gamma
t.gamma/4
pt(zscore - t.gamma, df = 2*n - 2)
1 - pnorm(zscore , mean=t.gamma) +
pnorm(=zscore, mean=t.gamma)
1 - pnorm(zscore , mean=t.gamma) +
pnorm(-zscore, mean=t.gamma)
1 - pt( zscore, 2*n - 2,ncp=t.gamma)+
pt(-zscore,2*n - 2,ncp=t .gamma)
1 - pt( zscore, 2*n - 2,ncp=t.gamma)+
pt(-zscore,2*n - 2,ncp=t.gamma)
1 - pnorm(zscore, mean=t.gamma) +
pnorm(-zscore, mean=t.gamma)
1 - pt( zscore - t.gamma, 2*n - 2)+
pt(-zscore - t.gamma,2*n - 2)
1 - pt( zscore, 2*n - 2,ncp=t.gamma)+
pt(-zscore,2*n - 2,ncp=t.gamma)
1 - pt( zscore - t.gamma, 2*n - 2)+
pt(-zscore - t.gamma,2*n - 2)
1 - pt( zscore, 2*n - 2,ncp=t.gamma)+
pt(-zscore,2*n - 2,ncp=t.gamma)
1 - pt( zscore - t.gamma, 2*n - 2)+
pt(-zscore - t.gamma,2*n - 2)
1 - pnorm(zscore - t.gamma) +
pnorm(-zscore - t.gamma)
1 - pt( zscore, 2*n - 2,ncp=t.gamma)+
pt(-zscore,2*n - 2,ncp=t.gamma)
zscore
t.gamma
-zscore
t.gamma
1 - pnorm(zscore, mean=t.gamma) +
pnorm(-zscore, mean=t.gamma)
1 - pnorm(zscore - t.gamma) +
pnorm(-zscore - t.gamma)
1 - pt( zscore, 2*n - 2,ncp=t.gamma)+
pt(-zscore,2*n - 2,ncp=t.gamma)
1 - pt( zscore - t.gamma, 2*n - 2)+
pt(-zscore - t.gamma,2*n - 2)
1 - pnorm(zscore, mean=t.gamma) +
pnorm(-zscore, mean=t.gamma)
1 - pnorm(zscore - t.gamma) +
pnorm(-zscore - t.gamma)
inv(matrix(c(5,-5,-5,5)))
matrix(c(5,-5,-5,5))
matrix(c(5,-5,-5,5),ncol = 2)
inv(matrix(c(5,-5,-5,5),ncol = 2))
(matrix(c(5,-5,-5,5),ncol = 2))^(-1)
solve(matrix(c(5,-5,-5,5),ncol = 2))
e
exp(1)
seq_len(3)
str(seq_len(5))
str(1:5)
x = 1:1000
a = 2
y1 = (log(x))^a
plot(x,y1,type = "l")
plot(x,y1/x,type = "l")
x = 1:1000
a = 10
y1 = (log(x))^a
plot(x,y1/x,type = "l")
x = 1:1000
a = 9
y1 = (log(x))^a
plot(x,y1/x,type = "l")
x = 1:10000
a = 8
y1 = (log(x))^a
plot(x,y1/x,type = "l")
x = 1:10000
a = 10
y1 = (log(x))^a
plot(x,y1/x,type = "l")
(1 - 0.992)*0.25 + 0.978*(1 - 0.25)
0.978*0.75/0.7355
plot(sqrt(x),log(x), type = "l")
x = 1:100000
plot(sqrt(x),log(x), type = "l")
plot(x, x/exp(sqrt(x)))
x = 1:100
plot(x, x/exp(sqrt(x)))
x = seq(0,100,0.1)
x
x = seq(0,100,0.1)
plot(x, x/exp(sqrt(x)))
log(10)
library(tidyquant)
tickers = c("GSPC", "DJI", "IXIC", "RUT", "XLE", "XLB", "XLI", "XLV", "SMH")
getSymbols(tickers,
from = "2007-01-01",
to = "2010-01-15")
prices <- map(tickers,function(x) Ad(get(x)))
getSymbols(tickers,
from = "2007-01-01",
to = "2010-01-15",, src='yahoo')
prices <- map(tickers,function(x) Ad(get(x)))
options("getSymbols.warning4.0"=FALSE)
options("getSymbols.yahoo.warning"=FALSE)
tickers = c("GSPC", "DJI", "IXIC", "RUT", "XLE", "XLB", "XLI", "XLV", "SMH")
getSymbols(tickers,
from = "2007-01-01",
to = "2010-01-15",, src='yahoo')
getSymbols(tickers,
from = "2007-01-01",
to = "2010-01-15")
prices <- map(tickers,function(x) Ad(get(x)))
head(DJI)
library(tidyquant)
options("getSymbols.warning4.0"=FALSE)
options("getSymbols.yahoo.warning"=FALSE)
tickers = c(".INS", ".DJI", ".IXIC", ".RUT", "XLE", "XLB", "XLI", "XLV", "SMH")
getSymbols(tickers,
from = "2007-01-01",
to = "2010-01-15")
tickers = c("INS", "DJI", "IXIC", "RUT", "XLE", "XLB", "XLI", "XLV", "SMH")
getSymbols(tickers,
from = "2007-01-01",
to = "2010-01-15")
tickers = c("INS", "DJI", "XLE", "XLB", "XLI", "XLV", "SMH", "XLF", "XLU")
getSymbols(tickers,
from = "2007-01-01",
to = "2010-01-15")
head(DJI)
tt = 1:1000
plot(sqrt(tt), log(tt^2), type = "l")
setwd("/Users/xinyi/Documents/GitHub/ngc/R")
rm(list =ls())
source("defn.R")
source("simulate.r")
source("array2mat.r")
source("pldag.set.r")
source("ngc.r")
source("grangerLasso.r")
source("grangerTLasso_v3.r")
source("grangerThrLasso.r")
source("metrics.R")
library(glmnet)
library(gglasso)
library(igraph)
library(knitr)
############### Dataset 1
## Creates the skeleton of a random sparse d x p x p network
## with 0.05 sparsity
set.seed(123)
d <- 2
p <- 20
n <- 30
edge = defn_net(d = d, p = p, n = n, sparsity = 0.1)
grp = c(rep(1,5),rep(2,5))
edge_grp = defn_net(d = d, p = p, n = n, grp = grp, sparsity = NULL)
phi_true = array(c(edge[2,,],edge[1,,]), dim = c(p,p,d))
phi_true_grp = array(c((edge_grp[2,,]),(edge_grp[1,,])), dim = c(p,p,d))
T <- 300
error_sd <- 0.2
###############
## Perform three different methods with different options for 10 replicates
## dataset has no group effect
sim_num = 10
## Regular lasso
st = Sys.time()
res_lass = list()
for (i in 1:sim_num) {
set.seed(123*i)
X <- simulate_data(n, edge, T = T, error_sd = error_sd)
fit1 = ngc(X, d = d, method = 'regular', typeIerr = 0.05)
res_lass[[i]] = fit1$estMat
}
end = Sys.time()
t_lass = end - st
t_lass/sim_num
## Threshold lasso
st = Sys.time()
res_tlass = list()
for (i in 1:sim_num) {
print(i)
set.seed(123*i)
X <- simulate_data(n, edge, T = T, error_sd = error_sd)
fit1 = ngc(X, d = d, method = 'threshold', typeIerr = 0.05)
res_tlass[[i]] = fit1$estMat
}
end = Sys.time()
t_tlass = end - st
t_tlass/sim_num
## Truncated lasso
st = Sys.time()
res_trlass = list()
for (i in 1:sim_num) {
print(i)
set.seed(123*i)
X <- simulate_data(n, edge, T = T, error_sd = error_sd)
fit1 = ngc(X, d = d, method = 'truncate', typeIerr = 0.05)
res_trlass[[i]] = fit1$estMat
}
end = Sys.time()
t_trlass = end - st
t_trlass/sim_num
c(t_lass/sim_num, t_tlass/sim_num, t_trlass/sim_num)
kable(getMeanMedianMetrics(phi_true, res_lass, 'lasso'),"markdown")
kable(getMeanMedianMetrics(phi_true, res_trlass, 'truncated'),"markdown")
kable(getMeanMedianMetrics(phi_true, res_tlass, 'threshold'),"markdown")
setwd("/Users/xinyi/Documents/GitHub/ngc/R")
rm(list =ls())
source("defn.R")
source("simulate.r")
source("array2mat.r")
source("pldag.set.r")
source("ngc.r")
source("grangerLasso.r")
source("grangerTLasso_v3.r")
source("grangerThrLasso.r")
source("metrics.R")
library(glmnet)
library(gglasso)
library(igraph)
library(knitr)
############### Dataset 1
## Creates the skeleton of a random sparse d x p x p network
## with 0.05 sparsity
set.seed(123)
d <- 2
p <- 16
n <- 30
edge = defn_net(d = d, p = p, n = n, sparsity = 0.1)
grp = c(rep(1,5),rep(2,5))
edge_grp = defn_net(d = d, p = p, n = n, grp = grp, sparsity = NULL)
phi_true = array(c(edge[2,,],edge[1,,]), dim = c(p,p,d))
phi_true_grp = array(c((edge_grp[2,,]),(edge_grp[1,,])), dim = c(p,p,d))
T <- 300
error_sd <- 0.2
###############
## Perform three different methods with different options for 10 replicates
## dataset has no group effect
sim_num = 10
## Regular lasso
st = Sys.time()
res_lass = list()
for (i in 1:sim_num) {
set.seed(123*i)
X <- simulate_data(n, edge, T = T, error_sd = error_sd)
fit1 = ngc(X, d = d, method = 'regular', typeIerr = 0.05)
res_lass[[i]] = fit1$estMat
}
end = Sys.time()
t_lass = end - st
t_lass/sim_num
## Threshold lasso
st = Sys.time()
res_tlass = list()
for (i in 1:sim_num) {
print(i)
set.seed(123*i)
X <- simulate_data(n, edge, T = T, error_sd = error_sd)
fit1 = ngc(X, d = d, method = 'threshold', typeIerr = 0.05)
res_tlass[[i]] = fit1$estMat
}
end = Sys.time()
t_tlass = end - st
t_tlass/sim_num
## Truncated lasso
st = Sys.time()
res_trlass = list()
for (i in 1:sim_num) {
print(i)
set.seed(123*i)
X <- simulate_data(n, edge, T = T, error_sd = error_sd)
fit1 = ngc(X, d = d, method = 'truncate', typeIerr = 0.05)
res_trlass[[i]] = fit1$estMat
}
end = Sys.time()
t_trlass = end - st
t_trlass/sim_num
c(t_lass/sim_num, t_tlass/sim_num, t_trlass/sim_num)
kable(getMeanMedianMetrics(phi_true, res_lass, 'lasso'),"markdown")
kable(getMeanMedianMetrics(phi_true, res_trlass, 'truncated'),"markdown")
kable(getMeanMedianMetrics(phi_true, res_tlass, 'threshold'),"markdown")
setwd("/Users/xinyi/Documents/GitHub/ngc/R")
rm(list =ls())
source("defn.R")
source("simulate.r")
source("array2mat.r")
source("pldag.set.r")
source("ngc.r")
source("grangerLasso.r")
source("grangerTLasso_v3.r")
source("grangerThrLasso.r")
source("metrics.R")
library(glmnet)
library(gglasso)
library(igraph)
library(knitr)
############### Dataset 1
## Creates the skeleton of a random sparse d x p x p network
## with 0.05 sparsity
set.seed(123)
d <- 2
p <- 16
n <- 30
edge = defn_net(d = d, p = p, n = n, sparsity = 0.1)
grp = c(rep(1,p/2),rep(2,p/2))
edge_grp = defn_net(d = d, p = p, n = n, grp = grp, sparsity = NULL)
phi_true = array(c(edge[2,,],edge[1,,]), dim = c(p,p,d))
phi_true_grp = array(c((edge_grp[2,,]),(edge_grp[1,,])), dim = c(p,p,d))
T <- 100
error_sd <- 0.2
###############
## Perform three different methods with different options for 10 replicates
## dataset has no group effect
sim_num = 10
## Regular lasso
st = Sys.time()
res_lass = list()
for (i in 1:sim_num) {
set.seed(123*i)
X <- simulate_data(n, edge, T = T, error_sd = error_sd)
fit1 = ngc(X, d = d, method = 'regular', typeIerr = 0.05)
res_lass[[i]] = fit1$estMat
}
end = Sys.time()
t_lass = end - st
t_lass/sim_num
## Threshold lasso
st = Sys.time()
res_tlass = list()
for (i in 1:sim_num) {
print(i)
set.seed(123*i)
X <- simulate_data(n, edge, T = T, error_sd = error_sd)
fit1 = ngc(X, d = d, method = 'threshold', typeIerr = 0.05)
res_tlass[[i]] = fit1$estMat
}
end = Sys.time()
t_tlass = end - st
t_tlass/sim_num
## Truncated lasso
st = Sys.time()
res_trlass = list()
for (i in 1:sim_num) {
print(i)
set.seed(123*i)
X <- simulate_data(n, edge, T = T, error_sd = error_sd)
fit1 = ngc(X, d = d, method = 'truncate', typeIerr = 0.05)
res_trlass[[i]] = fit1$estMat
}
end = Sys.time()
t_trlass = end - st
t_trlass/sim_num
c(t_lass/sim_num, t_tlass/sim_num, t_trlass/sim_num)
kable(getMeanMedianMetrics(phi_true, res_lass, 'lasso'),"markdown")
kable(getMeanMedianMetrics(phi_true, res_trlass, 'truncated'),"markdown")
kable(getMeanMedianMetrics(phi_true, res_tlass, 'threshold'),"markdown")
setwd("/Users/xinyi/Documents/GitHub/ngc/R")
rm(list =ls())
source("defn.R")
source("simulate.r")
source("array2mat.r")
source("pldag.set.r")
source("ngc.r")
source("grangerLasso.r")
source("grangerTLasso_v3.r")
source("grangerThrLasso.r")
source("metrics.R")
library(glmnet)
library(gglasso)
library(igraph)
library(knitr)
############### Dataset 1
## Creates the skeleton of a random sparse d x p x p network
## with 0.05 sparsity
set.seed(123)
d <- 2
p <- 16
n <- 20
edge = defn_net(d = d, p = p, n = n, sparsity = 0.1)
grp = c(rep(1,p/2),rep(2,p/2))
edge_grp = defn_net(d = d, p = p, n = n, grp = grp, sparsity = NULL)
phi_true = array(c(edge[2,,],edge[1,,]), dim = c(p,p,d))
phi_true_grp = array(c((edge_grp[2,,]),(edge_grp[1,,])), dim = c(p,p,d))
T <- 50
error_sd <- 0.2
###############
## Perform three different methods with different options for 10 replicates
## dataset has no group effect
sim_num = 10
## Regular lasso
st = Sys.time()
res_lass = list()
for (i in 1:sim_num) {
set.seed(123*i)
X <- simulate_data(n, edge, T = T, error_sd = error_sd)
fit1 = ngc(X, d = d, method = 'regular', typeIerr = 0.05)
res_lass[[i]] = fit1$estMat
}
end = Sys.time()
t_lass = end - st
t_lass/sim_num
## Threshold lasso
st = Sys.time()
res_tlass = list()
for (i in 1:sim_num) {
print(i)
set.seed(123*i)
X <- simulate_data(n, edge, T = T, error_sd = error_sd)
fit1 = ngc(X, d = d, method = 'threshold', typeIerr = 0.05)
res_tlass[[i]] = fit1$estMat
}
end = Sys.time()
t_tlass = end - st
t_tlass/sim_num
## Truncated lasso
st = Sys.time()
res_trlass = list()
for (i in 1:sim_num) {
print(i)
set.seed(123*i)
X <- simulate_data(n, edge, T = T, error_sd = error_sd)
fit1 = ngc(X, d = d, method = 'truncate', typeIerr = 0.05)
res_trlass[[i]] = fit1$estMat
}
end = Sys.time()
t_trlass = end - st
t_trlass/sim_num
c(t_lass/sim_num, t_tlass/sim_num, t_trlass/sim_num)
kable(getMeanMedianMetrics(phi_true, res_lass, 'lasso'),"markdown")
kable(getMeanMedianMetrics(phi_true, res_trlass, 'truncated'),"markdown")
kable(getMeanMedianMetrics(phi_true, res_tlass, 'threshold'),"markdown")
###############
## Perform three different methods with different options for 10 replicates
## dataset has group effect
sim_num = 10
## Regular lasso
st = Sys.time()
res_lass = list()
for (i in 1:sim_num) {
set.seed(123*i)
X <- simulate_data(n, edge_grp, T = T, error_sd = error_sd)
fit1 = ngc(X, d = d, method = 'regular', typeIerr = 0.05)
res_lass[[i]] = fit1$estMat
}
end = Sys.time()
t_lass = end - st
t_lass/sim_num
## Threshold lasso
st = Sys.time()
res_tlass = list()
for (i in 1:sim_num) {
print(i)
set.seed(123*i)
X <- simulate_data(n, edge_grp, T = T, error_sd = error_sd)
fit1 = ngc(X, d = d, method = 'threshold', typeIerr = 0.05)
res_tlass[[i]] = fit1$estMat
}
end = Sys.time()
t_tlass = end - st
t_tlass/sim_num
## Truncated lasso
st = Sys.time()
res_trlass = list()
for (i in 1:sim_num) {
print(i)
set.seed(123*i)
X <- simulate_data(n, edge_grp, T = T, error_sd = error_sd)
fit1 = ngc(X, d = d, method = 'truncate', typeIerr = 0.05)
res_trlass[[i]] = fit1$estMat
}
end = Sys.time()
t_trlass = end - st
t_trlass/sim_num
c(t_lass/sim_num, t_tlass/sim_num, t_trlass/sim_num)
kable(getMeanMedianMetrics(phi_true_grp, res_lass, 'lasso'),"markdown")
kable(getMeanMedianMetrics(phi_true_grp, res_trlass, 'truncated'),"markdown")
kable(getMeanMedianMetrics(phi_true_grp, res_tlass, 'threshold'),"markdown")
## Regular lasso
group = c(rep(1,p/2),rep(2,p/2))
###############
## Perform three different methods with different options for 10 replicates
## dataset has no group effect
sim_num = 10
## Regular lasso
group = c(rep(1,p/2),rep(2,p/2))
st = Sys.time()
st = Sys.time()
res_lass = list()
for (i in 1:sim_num) {
set.seed(123*i)
X <- simulate_data(n, edge_grp, T = T, error_sd = error_sd)
fit1 = ngc(X, d = d, method = 'regular', typeIerr = 0.05, group = group)
res_lass[[i]] = fit1$estMat
}
end = Sys.time()
t_lass = end - st
t_lass/sim_num
## Threshold lasso
st = Sys.time()
res_tlass = list()
for (i in 1:sim_num) {
print(i)
set.seed(123*i)
X <- simulate_data(n, edge_grp, T = T, error_sd = error_sd)
fit1 = ngc(X, d = d, method = 'threshold', typeIerr = 0.05, group = group)
res_tlass[[i]] = fit1$estMat
}
end = Sys.time()
t_tlass = end - st
t_tlass/sim_num
c(t_lass/sim_num, t_tlass/sim_num)
kable(getMeanMedianMetrics(phi_true_grp, res_lass, 'lasso'),"markdown")
kable(getMeanMedianMetrics(phi_true_grp, res_tlass, 'threshold'),"markdown")
