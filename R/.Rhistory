r <- outer(zz1, zz2, function(zz1, zz2) {
a = 3.7
diff = D[1] * zz1 + D[2] * zz2
diff2 = G[1] * zz1 + G[2] * zz2
reg = lambda * abs(diff) * (abs(diff) <= lambda) +
(2*a*lambda*abs(diff) - diff^2 - lambda^2)/(a - 1)/2 * (abs(diff) > lambda & abs(diff) <= a *lambda) +
lambda^2 * (a+1)/2 * (abs(diff) > a * lambda)
L =  sum(reg) +
lambda * (abs(zz1) + abs(zz2)) +
lambda2 * abs(diff2)
# lambda2 * abs(A)
return(L)
})
image(zz1,zz2, z = r, col = gray.colors(33))
image(zz1,zz2, z = r, col = gray.colors(33), xlab = "x_1", ylab = "x_2")
image(zz1,zz2, z = r, col = gray.colors(33), xlab = "x_1", ylab = "x_2", main = "Loss")
r <- outer(zz1, zz2, function(zz1, zz2) {
a = 3.7
diff = D[1] * zz1 + D[2] * zz2
diff2 = G[1] * zz1 + G[2] * zz2
reg = lambda * abs(diff) * (abs(diff) <= lambda) +
(2*a*lambda*abs(diff) - diff^2 - lambda^2)/(a - 1)/2 * (abs(diff) > lambda & abs(diff) <= a *lambda) +
lambda^2 * (a+1)/2 * (abs(diff) > a * lambda)
L = (y[1] - x[1] * zz1)^2 + (y[2] - x[2] * zz2)^2 + sum(reg) +
lambda * (abs(zz1) + abs(zz2)) +
lambda2 * abs(diff2)
# lambda2 * abs(A)
return(L)
})
image(zz1,zz2, z = r, col = gray.colors(33), xlab = "x_1", ylab = "x_2", main = "Loss")
rm(list =ls())
set.seed(127838)
N = 2
x = rnorm(N, 10,sd = 0.2)
y = x[1:(N/2)] * 0.8 + rnorm(N/2, sd = 0.001)
y = c(y, x[(N/2+1):N] * (-0.5))+ rnorm(N/2, sd = 0.001)
plot(x,y)
D = c(-1,1)
G = c(1,1)
lambda = 0.9
lambda2 = 0.02
A = cbind(rep(1:10, each = 10), rep(1:10, 10))
ll = c()
for (i in 1:nrow(A)){
ll[i] = lss(A[i,1], A[i,2])
}
zz1 <- zz2 <- seq(-2, 2, length.out = 300)
r <- outer(zz1, zz2, function(zz1, zz2) {
a = 3.7
diff = D[1] * zz1 + D[2] * zz2
diff2 = G[1] * zz1 + G[2] * zz2
reg = lambda * abs(diff) * (abs(diff) <= lambda) +
(2*a*lambda*abs(diff) - diff^2 - lambda^2)/(a - 1)/2 * (abs(diff) > lambda & abs(diff) <= a *lambda) +
lambda^2 * (a+1)/2 * (abs(diff) > a * lambda)
L = (y[1] - x[1] * zz1)^2 + (y[2] - x[2] * zz2)^2 + sum(reg) +
lambda * (abs(zz1) + abs(zz2)) +
lambda2 * abs(diff2)
# lambda2 * abs(A)
return(L)
})
image(zz1,zz2, z = r, col = gray.colors(33), xlab = "x_1", ylab = "x_2", main = "Loss")
a = 813 + 561 + 417
a/(a + 312 + 194 + 165+ 186+137+75)
qqnorm(c(1,5,2,6,7))
qqline()
qqline(c(1,5,2,6,7))
quantile(c(1,5,2,6,7))
quantile(1:5)
qqline(c(1,5,2,6,7))
qqnorm(c(1,5,2,6,7))
qnorm(0.975)
qnorm(0.1)
qnorm(0.0)
qnorm(0.00001)
qnorm(0.1)
qnorm(0.3)
qnorm(0.25)
qnorm(0.35)
qnorm(0.5)
qnorm(0.3)
qnorm(0.5)
qnorm(0.7)
qnorm(0.9)
qqline(c(1,5,2,6,7))
qqline(c(1,5,2,6,7)*10)
qqline(c(1,5,2,6,7)*10)
qqnorm(c(1,5,2,6,7)*10)
qqline(c(1,5,2,6,7)*10)
qnorm(0.2)
qnorm(0.2)
pnorm(0.05)
pnorm(1.96)
pnorm(-0.5)
dnorm(-0.5)
qnorm(seq(0.01,0.99,0.01))
quantile(rnorm(200),probs = seq(0.01,0.99,0.01))
60 * 0.3
pnorm(1.96)
zscore = (162 - 151.3)/8.7
zscore
pnorm(zscore)
pnorm(162,mean = 151.3, sd = 8.7)
1 - pnorm(zscore)
1 - pnorm(162,mean = 151.3, sd = 8.7)
(162 - 151.3)
(162 - 151.3)/8.7
1-68
(100-68)
(100-68)/2
zscore
1-0.89
qnorm(0.025)
qnorm(1 - 0.08, mean = 151.3, sd = 8.7)
qnorm(0.3, mean = 151.3, sd = 8.7)
library(forecast)
ma(1:10, order = 2, centre = TRUE)
ma(1:20, order = 7, centre = TRUE)
ma(1:20, order = 7, centre = TRUE)
(162 - 151.3)/8.7
# 1
zscore = (162 - 151.3)/8.7
pnorm(zscore)
# 2
pnorm(162, mean = 151.3, sd = 8.7)
############
## (c) P( 148<=X <= 154)?
## Z1 = (148 - 151.3) / 8.7
Z1 = (148 - 151.3) / 8.7
Z1
pnorm(Z1)
Z2 = (154 - 151.3) / 8.7
Z2
pnorm(Z2)
pnorm(Z2) - pnorm(Z1)
## (d) P(X>a) = 0.08?
1 - 0.08
## (d) P(X>a) = 0.08?
# 1 - 0.08 = 0.92
# Z = 1.41
# Z = (a - 151.3) / 8.7 = 1.41
# a = 8.7*1.41 + 151.3
8.7*1.41 + 151.3
# 1
qnorm(1 - 0.08)
# 2
qnorm(1 - 0.08, mean = 151.3, sd =8.7)
（5-2）
zscore = (5-2)/4
n = 10
delta = 6
t.gamma = delta/4
pt(zscore, 2*n - 2, ncp=t.gamma)
pt(zscore - t.gamma, 2*n - 2)
t.gamma
pt(zscore, df = 2*n - 2, ncp=t.gamma)
pt(zscore - t.gamma, df = 2*n - 2)
pt(zscore - t.gamma/4, df = 2*n - 2)
pt(zscore, df = 2*n - 2, ncp=t.gamma)
pt(zscore - t.gamma/4, df = 2*n - 2)
t.gamma
t.gamma
t.gamma/4
pt(zscore - t.gamma, df = 2*n - 2)
1 - pnorm(zscore , mean=t.gamma) +
pnorm(=zscore, mean=t.gamma)
1 - pnorm(zscore , mean=t.gamma) +
pnorm(-zscore, mean=t.gamma)
1 - pt( zscore, 2*n - 2,ncp=t.gamma)+
pt(-zscore,2*n - 2,ncp=t .gamma)
1 - pt( zscore, 2*n - 2,ncp=t.gamma)+
pt(-zscore,2*n - 2,ncp=t.gamma)
1 - pnorm(zscore, mean=t.gamma) +
pnorm(-zscore, mean=t.gamma)
1 - pt( zscore - t.gamma, 2*n - 2)+
pt(-zscore - t.gamma,2*n - 2)
1 - pt( zscore, 2*n - 2,ncp=t.gamma)+
pt(-zscore,2*n - 2,ncp=t.gamma)
1 - pt( zscore - t.gamma, 2*n - 2)+
pt(-zscore - t.gamma,2*n - 2)
1 - pt( zscore, 2*n - 2,ncp=t.gamma)+
pt(-zscore,2*n - 2,ncp=t.gamma)
1 - pt( zscore - t.gamma, 2*n - 2)+
pt(-zscore - t.gamma,2*n - 2)
1 - pnorm(zscore - t.gamma) +
pnorm(-zscore - t.gamma)
1 - pt( zscore, 2*n - 2,ncp=t.gamma)+
pt(-zscore,2*n - 2,ncp=t.gamma)
zscore
t.gamma
-zscore
t.gamma
1 - pnorm(zscore, mean=t.gamma) +
pnorm(-zscore, mean=t.gamma)
1 - pnorm(zscore - t.gamma) +
pnorm(-zscore - t.gamma)
1 - pt( zscore, 2*n - 2,ncp=t.gamma)+
pt(-zscore,2*n - 2,ncp=t.gamma)
1 - pt( zscore - t.gamma, 2*n - 2)+
pt(-zscore - t.gamma,2*n - 2)
1 - pnorm(zscore, mean=t.gamma) +
pnorm(-zscore, mean=t.gamma)
1 - pnorm(zscore - t.gamma) +
pnorm(-zscore - t.gamma)
inv(matrix(c(5,-5,-5,5)))
matrix(c(5,-5,-5,5))
matrix(c(5,-5,-5,5),ncol = 2)
inv(matrix(c(5,-5,-5,5),ncol = 2))
(matrix(c(5,-5,-5,5),ncol = 2))^(-1)
solve(matrix(c(5,-5,-5,5),ncol = 2))
e
exp(1)
seq_len(3)
str(seq_len(5))
str(1:5)
x = 1:1000
a = 2
y1 = (log(x))^a
plot(x,y1,type = "l")
plot(x,y1/x,type = "l")
x = 1:1000
a = 10
y1 = (log(x))^a
plot(x,y1/x,type = "l")
x = 1:1000
a = 9
y1 = (log(x))^a
plot(x,y1/x,type = "l")
x = 1:10000
a = 8
y1 = (log(x))^a
plot(x,y1/x,type = "l")
x = 1:10000
a = 10
y1 = (log(x))^a
plot(x,y1/x,type = "l")
(1 - 0.992)*0.25 + 0.978*(1 - 0.25)
0.978*0.75/0.7355
plot(sqrt(x),log(x), type = "l")
x = 1:100000
plot(sqrt(x),log(x), type = "l")
plot(x, x/exp(sqrt(x)))
x = 1:100
plot(x, x/exp(sqrt(x)))
x = seq(0,100,0.1)
x
x = seq(0,100,0.1)
plot(x, x/exp(sqrt(x)))
log(10)
library(tidyquant)
tickers = c("GSPC", "DJI", "IXIC", "RUT", "XLE", "XLB", "XLI", "XLV", "SMH")
getSymbols(tickers,
from = "2007-01-01",
to = "2010-01-15")
prices <- map(tickers,function(x) Ad(get(x)))
getSymbols(tickers,
from = "2007-01-01",
to = "2010-01-15",, src='yahoo')
prices <- map(tickers,function(x) Ad(get(x)))
options("getSymbols.warning4.0"=FALSE)
options("getSymbols.yahoo.warning"=FALSE)
tickers = c("GSPC", "DJI", "IXIC", "RUT", "XLE", "XLB", "XLI", "XLV", "SMH")
getSymbols(tickers,
from = "2007-01-01",
to = "2010-01-15",, src='yahoo')
getSymbols(tickers,
from = "2007-01-01",
to = "2010-01-15")
prices <- map(tickers,function(x) Ad(get(x)))
head(DJI)
library(tidyquant)
options("getSymbols.warning4.0"=FALSE)
options("getSymbols.yahoo.warning"=FALSE)
tickers = c(".INS", ".DJI", ".IXIC", ".RUT", "XLE", "XLB", "XLI", "XLV", "SMH")
getSymbols(tickers,
from = "2007-01-01",
to = "2010-01-15")
tickers = c("INS", "DJI", "IXIC", "RUT", "XLE", "XLB", "XLI", "XLV", "SMH")
getSymbols(tickers,
from = "2007-01-01",
to = "2010-01-15")
tickers = c("INS", "DJI", "XLE", "XLB", "XLI", "XLV", "SMH", "XLF", "XLU")
getSymbols(tickers,
from = "2007-01-01",
to = "2010-01-15")
head(DJI)
setwd("/Users/xinyi/Documents/GitHub/network_ngc/R")
library('microbenchmark')
source("defn.R")
source("simulate.r")
source("array2mat.r")
source("pldag.set.r")
source("ngc.r")
source("grangerLasso.r")
source("grangerTLasso_v3.r")
source("grangerThrLasso.r")
source("metrics.R")
library(glmnet)
library(gglasso)
library(igraph)
library(xtable)
fit1 = ngc(X, d=d, method = 'regular', group = group, groupByTime = TRUE)
###############
## Simulate n iid samples from the granger causality network
## with p variables observed over T time points
## X is a n x p x T array
set.seed(123)
T <- 300
error_sd <- 0.2
X <- simulate_data(n, edge, T = T, error_sd = error_sd)
X_grp <- simulate_data(n, edge_grp, T = T, error_sd = error_sd)
###############
## Creates the skeleton of a random sparse d x p x p network
## with 0.05 sparsity
set.seed(123)
d <- 2
p <- 10
n <- 20
edge = defn_net(d = d, p = p, n = n, sparsity = 0.1)
set.seed(123)
grp = c(rep(1,5),rep(2,5))
edge_grp = defn_net(d = d, p = p, n = n, grp = grp, sparsity = 0.1)
microbenchmark(defn_net(d = d, p = p, n = n), times=10)
phi_true = array(c((edge[1,,]),(edge[2,,])), dim = c(10,10,2))
phi_true_grp = array(c((edge_grp[1,,]),(edge_grp[2,,])), dim = c(10,10,2))
# Unit: milliseconds
#    min       lq     mean   median
# 2.45809 2.680687 2.922115 2.831178
#    uq       max     neval
# 3.184873 3.475586    10
###############
## Simulate n iid samples from the granger causality network
## with p variables observed over T time points
## X is a n x p x T array
set.seed(123)
T <- 300
error_sd <- 0.2
X <- simulate_data(n, edge, T = T, error_sd = error_sd)
X_grp <- simulate_data(n, edge_grp, T = T, error_sd = error_sd)
fit1 = ngc(X, d=d, method = 'regular', group = group, groupByTime = TRUE)
group = c(rep(1,5),rep(2,5))
fit1 = ngc(X, d=d, method = 'regular', group = group, groupByTime = TRUE)
fit1 = ngc(X, d=d, method = 'regular', group = group)
## Check n
sim_num = 10
n_set = c(20, 50, 100, 200)
time_nall = matrix(0, nrow = 4, ncol = length(n_set))
group = rep(1:2,each = 5)
for (i in 1:length(n_set)) {
print(i)
time_ls = matrix(0, nrow = sim_num, ncol = 4)
error_ls = rep(list(matrix(0, nrow = sim_num, ncol = 4)), 4)
for (j in 1:sim_num) {
print(paste("J:",j))
st = Sys.time()
tmp1 = ngc_sim1(n = n_set[i], seed = j*123)
end = Sys.time()
time_ls[j, 1] = end-st
phi_true = array(c(tmp1[[1]][2,,],tmp1[[1]][1,,]), dim = c(10,10,2))
error_ls[[1]][j,] = checkEstimation(phi_true, tmp1[[2]]$estMat, method_name = "Lasso")$metrics[2,]
st = Sys.time()
tmp12 = ngc_sim1(n = n_set[i], group = group, seed = j*12345)
end = Sys.time()
time_ls[j, 2] = end-st
phi_true = array(c(tmp12[[1]][2,,],tmp12[[1]][1,,]), dim = c(10,10,2))
error_ls[[2]][j,] = checkEstimation(phi_true, tmp12[[2]]$estMat, method_name = "Lasso")$metrics[2,]
st = Sys.time()
tmp13 = ngc_sim1(n = n_set[i], groupByTime = TRUE, seed = j*123)
end = Sys.time()
time_ls[j, 3] = end-st
phi_true = array(c(tmp13[[1]][2,,],tmp13[[1]][1,,]), dim = c(10,10,2))
error_ls[[3]][j,] = checkEstimation(phi_true, tmp13[[2]]$estMat, method_name = "Lasso")$metrics[2,]
st = Sys.time()
tmp14 = ngc_sim1(n = n_set[i], group = group, groupByTime = TRUE, seed = j*123)
end = Sys.time()
time_ls[j, 4] = end-st
phi_true = array(c(tmp14[[1]][2,,],tmp14[[1]][1,,]), dim = c(10,10,2))
error_ls[[4]][j,] = checkEstimation(phi_true, tmp14[[2]]$estMat, method_name = "Lasso")$metrics[2,]
}
time_nall[, i] = apply(time_ls,2,median)
}
ngc_sim1 = function(n=20, d=2, p=10, T=50, group = NULL, groupByTime = FALSE, seed) {
set.seed(seed)
edge = defn_net(d = d, p = p, n = n)
error_sd <- 0.2
X <- simulate_data(n, edge, T = T, error_sd = error_sd)
fit1 = ngc(X, d = d, method = 'regular', typeIerr = 0.02, group = group, groupByTime = groupByTime)
return(list(edge, fit1))
}
ngc_sim2 = function(n=20, d=2, p=10, T=50, group = NULL, groupByTime = FALSE, seed) {
set.seed(seed)
edge = defn_net(d = d, p = p, n = n)
error_sd <- 0.2
X <- simulate_data(n, edge, T = T, error_sd = error_sd)
fit2 <- ngc(X, d = d, method = 'threshold', typeIerr = 0.02, group = group, groupByTime = groupByTime)
return(list(edge, fit2))
}
ngc_sim3 = function(n=20, d=2, p=10, T=50, group = NULL, groupByTime = FALSE, seed) {
set.seed(seed)
edge = defn_net(d = d, p = p, n = n)
error_sd <- 0.2
X <- simulate_data(n, edge, T = T, error_sd = error_sd)
fit3 <- ngc(X, d=d, method = 'truncate',
typeIerr = 0.02)
return(list(edge, fit3))
}
ngc_sim4 = function(n=20, d=2, p=10, T=50, group = NULL, groupByTime = FALSE, seed) {
set.seed(seed)
edge = defn_net(d = d, p = p, n = n)
error_sd <- 0.2
X <- simulate_data(n, edge, T = T, error_sd = error_sd)
fit3 <- ngc(X, method = 'truncate',
typeIerr = 0.02)
return(list(edge, fit3))
}
## Check n
sim_num = 10
n_set = c(20, 50, 100, 200)
time_nall = matrix(0, nrow = 4, ncol = length(n_set))
print(i)
time_ls = matrix(0, nrow = sim_num, ncol = 4)
error_ls = rep(list(matrix(0, nrow = sim_num, ncol = 4)), 4)
for (j in 1:sim_num) {
print(paste("J:",j))
st = Sys.time()
tmp1 = ngc_sim1(n = n_set[i], seed = j*123)
end = Sys.time()
time_ls[j, 1] = end-st
phi_true = array(c(tmp1[[1]][2,,],tmp1[[1]][1,,]), dim = c(10,10,2))
error_ls[[1]][j,] = checkEstimation(phi_true, tmp1[[2]]$estMat, method_name = "Lasso")$metrics[2,]
st = Sys.time()
tmp12 = ngc_sim1(n = n_set[i], group = group, seed = j*12345)
end = Sys.time()
time_ls[j, 2] = end-st
phi_true = array(c(tmp12[[1]][2,,],tmp12[[1]][1,,]), dim = c(10,10,2))
error_ls[[2]][j,] = checkEstimation(phi_true, tmp12[[2]]$estMat, method_name = "Lasso")$metrics[2,]
st = Sys.time()
tmp13 = ngc_sim1(n = n_set[i], groupByTime = TRUE, seed = j*123)
end = Sys.time()
time_ls[j, 3] = end-st
phi_true = array(c(tmp13[[1]][2,,],tmp13[[1]][1,,]), dim = c(10,10,2))
error_ls[[3]][j,] = checkEstimation(phi_true, tmp13[[2]]$estMat, method_name = "Lasso")$metrics[2,]
st = Sys.time()
tmp14 = ngc_sim1(n = n_set[i], group = group, groupByTime = TRUE, seed = j*123)
end = Sys.time()
time_ls[j, 4] = end-st
phi_true = array(c(tmp14[[1]][2,,],tmp14[[1]][1,,]), dim = c(10,10,2))
error_ls[[4]][j,] = checkEstimation(phi_true, tmp14[[2]]$estMat, method_name = "Lasso")$metrics[2,]
}
setwd("/Users/xinyi/Documents/GitHub/network_ngc/R")
library('microbenchmark')
source("defn.R")
source("simulate.r")
source("array2mat.r")
source("pldag.set.r")
source("ngc.r")
source("grangerLasso.r")
source("grangerTLasso_v3.r")
source("grangerThrLasso.r")
source("metrics.R")
library(glmnet)
library(gglasso)
library(igraph)
library(xtable)
###############
## Creates the skeleton of a random sparse d x p x p network
## with 0.05 sparsity
set.seed(123)
d <- 2
p <- 10
n <- 50
edge = defn_net(d = d, p = p, n = n, sparsity = 0.1)
set.seed(123)
grp = c(rep(1,5),rep(2,5))
edge_grp = defn_net(d = d, p = p, n = n, grp = grp, sparsity = 0.1)
microbenchmark(defn_net(d = d, p = p, n = n), times=10)
phi_true = array(c(edge[2,,],edge[1,,]), dim = c(10,10,2))
phi_true_grp = array(c((edge_grp[2,,]),(edge_grp[1,,])), dim = c(10,10,2))
## Check n
sim_num = 10
n_set = c(20, 50, 100, 200)
time_nall = matrix(0, nrow = 4, ncol = length(n_set))
group = rep(1:2,each = 5)
print(i)
time_ls = matrix(0, nrow = sim_num, ncol = 4)
error_ls = rep(list(matrix(0, nrow = sim_num, ncol = 4)), 4)
for (j in 1:sim_num) {
print(paste("J:",j))
st = Sys.time()
tmp1 = ngc_sim1(n = n_set[i], seed = j*123)
end = Sys.time()
time_ls[j, 1] = end-st
phi_true = array(c(tmp1[[1]][2,,],tmp1[[1]][1,,]), dim = c(10,10,2))
error_ls[[1]][j,] = checkEstimation(phi_true, tmp1[[2]]$estMat, method_name = "Lasso")$metrics[2,]
st = Sys.time()
tmp12 = ngc_sim1(n = n_set[i], group = group, seed = j*12345)
end = Sys.time()
time_ls[j, 2] = end-st
phi_true = array(c(tmp12[[1]][2,,],tmp12[[1]][1,,]), dim = c(10,10,2))
error_ls[[2]][j,] = checkEstimation(phi_true, tmp12[[2]]$estMat, method_name = "Lasso")$metrics[2,]
st = Sys.time()
tmp13 = ngc_sim1(n = n_set[i], groupByTime = TRUE, seed = j*123)
end = Sys.time()
time_ls[j, 3] = end-st
phi_true = array(c(tmp13[[1]][2,,],tmp13[[1]][1,,]), dim = c(10,10,2))
error_ls[[3]][j,] = checkEstimation(phi_true, tmp13[[2]]$estMat, method_name = "Lasso")$metrics[2,]
st = Sys.time()
tmp14 = ngc_sim1(n = n_set[i], group = group, groupByTime = TRUE, seed = j*123)
end = Sys.time()
time_ls[j, 4] = end-st
phi_true = array(c(tmp14[[1]][2,,],tmp14[[1]][1,,]), dim = c(10,10,2))
error_ls[[4]][j,] = checkEstimation(phi_true, tmp14[[2]]$estMat, method_name = "Lasso")$metrics[2,]
}
